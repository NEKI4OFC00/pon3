import telebot
from telebot import types
import sqlite3
import random
import string
from datetime import datetime, timedelta
import threading
import os
import time

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7219521716:AAEvgwERJ0hD245gbpXgyUROhSVzmW-DxU4'

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
ADMIN_IDS = [6665308361, 7168398511]
REPORT_ADMIN_ID = 6665308361  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±

bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('referrals.db', check_same_thread=False)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
with conn:
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS referrals (
            user_id INTEGER PRIMARY KEY,
            referrer_id INTEGER,
            invited_count INTEGER DEFAULT 0,
            first_time BOOLEAN DEFAULT 1,
            registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS promocodes (
            code TEXT PRIMARY KEY,
            duration INTEGER,
            used BOOLEAN DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_promotions (
            user_id INTEGER PRIMARY KEY,
            end_time TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS banned_users (
            user_id INTEGER PRIMARY KEY,
            admin_id INTEGER,
            reason TEXT
        )
    ''')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
def generate_promocode(prefix):
    code = prefix + ''.join(random.choice(string.ascii_uppercase) for _ in range(5))
    code += random.choice(string.digits + '#&!?')
    return code

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user_data():
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM user_promotions')
    users = cursor.fetchall()
    with open('user_data.txt', 'w') as f:
        for user in users:
            user_id, end_time = user
            f.write(f'{user_id},{end_time}\n')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data():
    file_path = 'user_data.txt'
    if os.path.exists(file_path):
        cursor = conn.cursor()
        with open(file_path, 'r') as f:
            for line in f:
                user_id, end_time = line.strip().split(',')
                cursor.execute('INSERT OR REPLACE INTO user_promotions (user_id, end_time) VALUES (?, ?)', (user_id, end_time))
        conn.commit()
    else:
        print(f"File {file_path} does not exist")

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def schedule_updates():
    threading.Timer(1800, schedule_updates).start()
    save_user_data()

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–± –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
user_report_time = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_user_banned(user_id):
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM banned_users WHERE user_id = ?', (user_id,))
    return cursor.fetchone() is not None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id

    if is_user_banned(user_id):
        cursor = conn.cursor()
        cursor.execute('SELECT admin_id, reason FROM banned_users WHERE user_id = ?', (user_id,))
        admin_id, reason = cursor.fetchone()
        bot.send_message(message.chat.id, f"–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_id} –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}\n"
                                          f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–π –±–∞–Ω –æ—à–∏–±–æ—á–Ω—ã–º, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    cursor = conn.cursor()
    cursor.execute('SELECT first_time FROM referrals WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if not result:
        referrer_id = message.text.split("?start=")[-1] if '?start=' in message.text else None
        cursor.execute('INSERT INTO referrals (user_id, referrer_id, invited_count, first_time) VALUES (?, ?, 1, 1)', (user_id, referrer_id))
        conn.commit()

        if referrer_id is not None:
            cursor.execute('UPDATE referrals SET invited_count = invited_count + 1 WHERE user_id = ?', (referrer_id,))
            conn.commit()
    else:
        referrer_id = None

    cursor.execute('UPDATE referrals SET first_time = 0 WHERE user_id = ?', (user_id,))
    conn.commit()

    referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"

    cursor.execute('SELECT invited_count FROM referrals WHERE user_id = ?', (user_id,))
    invited_count = cursor.fetchone()[0]

    markup = generate_main_menu_markup(user_id)

    bot.send_message(message.chat.id, 
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MIDEROV SNOS!\n\n"
        "–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∫–∞–Ω–∞–ª—ã\n"
        "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!",
        reply_markup=markup
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def generate_main_menu_markup(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription"),
        types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="referral")
    )
    
    if user_id in ADMIN_IDS:
        markup.row(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promocode"))

    cursor = conn.cursor()
    cursor.execute('SELECT end_time FROM user_promotions WHERE user_id = ?', (user_id,))
    promotion = cursor.fetchone()
    if promotion and datetime.strptime(promotion[0], '%Y-%m-%d %H:%M:%S.%f') > datetime.now():
        markup.row(types.InlineKeyboardButton("–°–Ω–æ—Å", callback_data="snos"))
    else:
        markup.row(types.InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode"))

    markup.row(types.InlineKeyboardButton("–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è", callback_data="remaining_time"))

    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id

    if is_user_banned(user_id):
        cursor = conn.cursor()
        cursor.execute('SELECT admin_id, reason FROM banned_users WHERE user_id = ?', (user_id,))
        admin_id, reason = cursor.fetchone()
        bot.send_message(call.message.chat.id, f"–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_id} –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}\n"
                                              f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–π –±–∞–Ω –æ—à–∏–±–æ—á–Ω—ã–º, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    cursor = conn.cursor()

    if call.data == "buy_subscription":
        bot.answer_callback_query(call.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:")

        price_text = ("–ü—Ä–∞–π—Å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞üí∏\n1 –¥–µ–Ω—å - 50‚ÇΩ\n1 –Ω–µ–¥–µ–ª—è - 150‚ÇΩ\n1 –º–µ—Å—è—Ü - 400‚ÇΩ\n1 –≥–æ–¥ - 1000‚ÇΩ\n–Ω–∞–≤—Å–µ–≥–¥–∞ - 3500‚ÇΩ\n –ü–∏—Å–∞—Ç—å –ø–æ –ø–æ–≤–æ–¥—É –ø–æ–∫—É–ø–∫–∏üì• - @liderdoxa\n"
                      "–¢–∞–∫ –∂–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Ä–∞–∑—É –º–Ω–æ–≥–æ –∫–ª—é—á–µ–π —É—Å–ª–æ–≤–Ω–æ –ø–æ–¥ —Ä–∞–∑–¥–∞—á—É, —Ç–æ –≤–æ–∑–º–æ–∂–µ–Ω –æ–ø—Çüî•"
                     )

        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=price_text,
            reply_markup=markup
        )

    elif call.data == "referral":
        referral_link = f"https://t.me/{bot.get_me().username}?start={call.from_user.id}"

        cursor.execute('SELECT invited_count FROM referrals WHERE user_id = ?', (call.from_user.id,))
        
        result = cursor.fetchone()
        invited_count = result[0] if result else 0

        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ü—Ä–∏–≥–ª–∞—à–∞—è –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–∞, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 20% –≤—Ä–µ–º–µ–Ω–∏ —Å –∫—É–ø–ª–µ–Ω–Ω–æ–π –∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                 f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {referral_link}\n\n"
                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {invited_count}",
            reply_markup=markup
        )

    elif call.data == "create_promocode":
        if user_id in ADMIN_IDS:
            markup = types.InlineKeyboardMarkup()
        markup.row(
                types.InlineKeyboardButton("2 —á–∞—Å–∞", callback_data="create_promocode_0_08"),
                types.InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data="create_promocode_1"),
                types.InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data="create_promocode_7"),
                types.InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="create_promocode_30"),
                types.InlineKeyboardButton("1 –≥–æ–¥", callback_data="create_promocode_365")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
@bot.message_handler(commands=['status'])
def user_status(message):
    if message.from_user.id in ADMIN_IDS:
        try:
            command, user_identifier = message.text.split()
            cursor = conn.cursor()
            
            if user_identifier.startswith('@'):
                cursor.execute('SELECT id, username FROM users WHERE username = ?', (user_identifier[1:],))
            else:
                user_identifier = int(user_identifier)
                cursor.execute('SELECT id, username FROM users WHERE id = ?', (user_identifier,))
            
            user_data = cursor.fetchone()
            if not user_data:
                bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            user_id, username = user_data

            cursor.execute('SELECT end_time FROM user_promotions WHERE user_id = ?', (user_id,))
            promotion = cursor.fetchone()
            
            if promotion:
                end_time = datetime.strptime(promotion[0], '%Y-%m-%d %H:%M:%S.%f')
                remaining_time = end_time - datetime.now()
                days, seconds = remaining_time.days, remaining_time.seconds
                hours = seconds // 3600
                minutes = (seconds % 3600) // 60
                remaining_time_text = f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"
            else:
                remaining_time_text = "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            
            cursor.execute('SELECT registration_time FROM referrals WHERE user_id = ?', (user_id,))
            registration_time = cursor.fetchone()
            
            if registration_time:
                registration_time = datetime.strptime(registration_time[0], '%Y-%m-%d %H:%M:%S.%f')
                registration_duration = datetime.now() - registration_time
                reg_days, reg_seconds = registration_duration.days, registration_duration.seconds
                reg_hours = reg_seconds // 3600
                reg_minutes = (reg_seconds % 3600) // 60
                registration_time_text = f"{reg_days} –¥–Ω–µ–π, {reg_hours} —á–∞—Å–æ–≤, {reg_minutes} –º–∏–Ω—É—Ç"
            else:
                registration_time_text = "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"

            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}\n–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏üî• {remaining_time_text}\n–í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {registration_time_text}")
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status <user_id –∏–ª–∏ username>")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
@bot.message_handler(commands=['unsubscribe'])
def unsubscribe_user(message):
    if message.from_user.id in ADMIN_IDS:
        try:
            command, user_identifier, *reason_parts = message.text.split()
            reason = " ".join(reason_parts).strip()
            cursor = conn.cursor()
            
            if user_identifier.startswith('@'):
                cursor.execute('SELECT id, username FROM users WHERE username = ?', (user_identifier[1:],))
            else:
                user_identifier = int(user_identifier)
                cursor.execute('SELECT id, username FROM users WHERE id = ?', (user_identifier,))
            
            user_data = cursor.fetchone()
            if not user_data:
                bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            user_id, username = user_data
            cursor.execute('DELETE FROM user_promotions WHERE user_id = ?', (user_id,))
            conn.commit()

            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω")
            bot.send_message(user_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} —Å–Ω—è–ª –≤–∞–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–µ: **{reason}**\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe <user_id –∏–ª–∏ username> <reason>")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
def generate_promocode(prefix, length=5):
    code = prefix + ''.join(random.choice(string.ascii_uppercase) for _ in range(length))
    code += random.choice(string.digits + '#&!?')
    return code

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤—É—Ö—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("create_promocode_"))
def create_promocode_handler(call):
    if call.from_user.id in ADMIN_IDS:
        duration = int(call.data.split("_")[2])
        prefix = call.data.split("_")[1]
        if duration == 1:
            prefix = "1D-"
        elif duration == 7:
            prefix = "1W-"
        elif duration == 30:
            prefix = "1M-"
        elif duration == 365:
            prefix = "1Y-"
        elif duration == "FOREVER":
            prefix = "FOREVER-"
        elif duration == 0.083: # 2 —á–∞—Å–∞
            prefix = "2H-"
            duration = 0.083

        code = generate_promocode(prefix)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO promocodes (code, duration) VALUES (?, ?)', (code, duration))
        conn.commit()

        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {code}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –¥–Ω–µ–π",
            reply_markup=markup
        )
    else:
        bot.answer_callback_query(call.id, text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

# –ö–æ–º–∞–Ω–¥–∞ /ban
@bot.message_handler(commands=['ban'])
def ban_user(message):
    if message.from_user.id in ADMIN_IDS:
        try:
            command, user_identifier, *reason_parts = message.text.split()
            reason = " ".join(reason_parts).strip()
            cursor = conn.cursor()
            
            if user_identifier.startswith('@'):
                cursor.execute('SELECT id, username FROM users WHERE username = ?', (user_identifier[1:],))
            else:
                user_identifier = int(user_identifier)
                cursor.execute('SELECT id, username FROM users WHERE id = ?', (user_identifier,))
            
            user_data = cursor.fetchone()
            if not user_data:
                bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            user_id, username = user_data
            cursor.execute('INSERT INTO banned_users (user_id, admin_id, reason) VALUES (?, ?, ?)', (user_id, message.from_user.id, reason))
            conn.commit()

            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ban <user_id –∏–ª–∏ username> <reason>")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

# –ö–æ–º–∞–Ω–¥–∞ /unban
@bot.message_handler(commands=['unban'])
def unban_user(message):
    if message.from_user.id in ADMIN_IDS:
        try:
            command, user_identifier = message.text.split()
            cursor = conn.cursor()
            
            if user_identifier.startswith('@'):
                cursor.execute('SELECT id, username FROM users WHERE username = ?', (user_identifier[1:],))
            else:
                user_identifier = int(user_identifier)
                cursor.execute('SELECT id, username FROM users WHERE id = ?', (user_identifier,))
            
            user_data = cursor.fetchone()
            if not user_data:
                bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            user_id, username = user_data
            cursor.execute('DELETE FROM banned_users WHERE user_id = ?', (user_id,))
            conn.commit()

            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unban <user_id –∏–ª–∏ username>")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–∞–ª–æ–±
def process_report(message):
    user_id = message.from_user.id

    if is_user_banned(user_id):
        cursor = conn.cursor()
        cursor.execute('SELECT admin_id, reason FROM banned_users WHERE user_id = ?', (user_id,))
        admin_id, reason = cursor.fetchone()
        bot.send_message(message.chat.id, f"–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_id} –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}\n"
                                          f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–π –±–∞–Ω –æ—à–∏–±–æ—á–Ω—ã–º, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    report_target = message.text.strip()
    current_time = datetime.now()

    if user_id in user_report_time and (current_time - user_report_time[user_id]).total_seconds() < 600:
        bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂–∞–ª–æ–±—ã –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç")
        return

    user_report_time[user_id] = current_time

    cursor.execute('SELECT username FROM users WHERE id = ?', (user_id,))
    username = cursor.fetchone()[0]

    bot.send_message(REPORT_ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –æ—Ç–ø—Ä–∞–≤–∏–ª –∂–∞–ª–æ–±—É: {report_target}")
    bot.send_message(message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ —Å–Ω–æ—Å–∞‚úÖ")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
def generate_main_menu_markup(user_id):
    cursor = conn.cursor()
    cursor.execute('SELECT end_time FROM user_promotions WHERE user_id = ?', (user_id,))
    promotion = cursor.fetchone()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if promotion:
        end_time = datetime.strptime(promotion[0], '%Y-%m-%d %H:%M:%S.%f')
        if end_time > datetime.now():
            markup.row(types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
        else:
            markup.row(types.KeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
    else:
        markup.row(types.KeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
    
    markup.row(types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É"))
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username

    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
    user_exists = cursor.fetchone()

    if not user_exists:
        cursor.execute('INSERT INTO users (id, username) VALUES (?, ?)', (user_id, username))
        conn.commit()

    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=generate_main_menu_markup(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
@bot.message_handler(func=lambda message: True)
def menu_handler(message):
    user_id = message.from_user.id

    if message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        cursor = conn.cursor()
        cursor.execute('SELECT end_time FROM user_promotions WHERE user_id = ?', (user_id,))
        promotion = cursor.fetchone()

        if promotion:
            end_time = datetime.strptime(promotion[0], '%Y-%m-%d %H:%M:%S.%f')
            if end_time > datetime.now():
                remaining_time = end_time - datetime.now()
                days, seconds = remaining_time.days, remaining_time.seconds
                hours = seconds // 3600
                minutes = (seconds % 3600) // 60
                remaining_time_text = f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"
                bot.send_message(user_id, f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –µ—â–µ {remaining_time_text}")
            else:
                bot.send_message(user_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ö—É–ø–∏—Ç–µ –Ω–æ–≤—É—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏.")
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ö—É–ø–∏—Ç–µ –Ω–æ–≤—É—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏.")
    
    elif message.text == "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data="buy_subscription_1"))
        markup.row(types.InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data="buy_subscription_7"))
        markup.row(types.InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="buy_subscription_30"))
        markup.row(types.InlineKeyboardButton("1 –≥–æ–¥", callback_data="buy_subscription_365"))
        markup.row(types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data="buy_subscription_FOREVER"))
        markup.row(types.InlineKeyboardButton("2 —á–∞—Å–∞", callback_data="buy_subscription_0.083"))

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    
    elif message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É":
        bot.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_report)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_subscription_"))
def buy_subscription_handler(call):
    user_id = call.from_user.id
    duration = call.data.split("_")[2]
    
    if duration == "FOREVER":
        end_time = "FOREVER"
    else:
        end_time = datetime.now() + timedelta(days=float(duration))

    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO user_promotions (user_id, end_time) VALUES (?, ?)', (user_id, end_time))
    conn.commit()

    bot.send_message(user_id, f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –Ω–∞ {duration} –¥–Ω–µ–π")
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", reply_markup=generate_main_menu_markup(user_id))

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_user_banned(user_id):
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM banned_users WHERE user_id = ?', (user_id,))
    return cursor.fetchone() is not None

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)