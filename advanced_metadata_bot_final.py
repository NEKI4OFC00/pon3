
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from PIL import Image
from PIL.ExifTags import TAGS, GPSTAGS
import time

API_TOKEN = '7964169165:AAEKm-k603knI-iHrVso6ITXR094Nx8YJC0'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

user_requests = {}

# –ê–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async def anti_spam(message: types.Message):
    user_id = message.from_user.id
    current_time = time.time()

    if user_id in user_requests:
        request_times = user_requests[user_id]
        request_times = [req for req in request_times if current_time - req < 2]
        if len(request_times) >= 5:
            await message.answer("–ù–∞—à–∞ –∞–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ‚õîÔ∏è\nP.S. –í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ‚åõÔ∏è")
            await asyncio.sleep(20)  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 20 —Å–µ–∫—É–Ω–¥
            return True
        else:
            user_requests[user_id].append(current_time)
    else:
        user_requests[user_id] = [current_time]

    return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if await anti_spam(message):
        return

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∫–ª—é—á–∞—è EXIFüì∏.\n\n–°–æ–∑–¥–∞—Ç–µ–ª—åüëë: @OS7NT")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è GPS-–¥–∞–Ω–Ω—ã—Ö
def get_gps_info(exif_data):
    if not exif_data:
        return None
    
    gps_info = exif_data.get(34853)
    if gps_info:
        gps_data = {}
        for tag, value in gps_info.items():
            decoded = GPSTAGS.get(tag, tag)
            gps_data[decoded] = value

        return gps_data
    return None

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥
def convert_to_degrees(value):
    d = float(value[0])
    m = float(value[1]) / 60.0
    s = float(value[2]) / 3600.0
    return d + m + s

# –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ EXIF-—Ç–µ–≥–∞
def describe_tag(tag, value):
    descriptions = {
        'DateTime': "üìÖ –í—Ä–µ–º—è —Å—ä—ë–º–∫–∏",
        'Make': "üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –∫–∞–º–µ—Ä—ã",
        'Model': "üì∑ –ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        'Software': "üíæ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ",
        'ExifImageWidth': "‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        'ExifImageHeight': "‚ÜïÔ∏è –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        'FNumber': "üîç –î–∏–∞—Ñ—Ä–∞–≥–º–∞",
        'ExposureTime': "‚è≥ –í—ã–¥–µ—Ä–∂–∫–∞",
        'ISOSpeedRatings': "üéõÔ∏è ISO (–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)",
        'FocalLength': "üî≠ –§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ",
        'GPSInfo': "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (—à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞)",
    }

    if tag in descriptions:
        return f"<b>{descriptions[tag]}:</b> {value}"
    else:
        return f"<b>{tag}:</b> {value}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
def format_metadata(metadata, gps_info=None):
    formatted_metadata = "<b>üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:</b>\n\n"
    for tag, value in metadata.items():
        formatted_metadata += describe_tag(tag, value) + "\n"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GPS –¥–∞–Ω–Ω—ã—Ö
    if gps_info:
        lat = convert_to_degrees(gps_info['GPSLatitude'])
        lon = convert_to_degrees(gps_info['GPSLongitude'])
        formatted_metadata += f"<b>üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> –®–∏—Ä–æ—Ç–∞: {lat}, –î–æ–ª–≥–æ—Ç–∞: {lon}\n"
    
    return formatted_metadata

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def extract_metadata(file):
    image = Image.open(file)
    exif_data = image._getexif()
    if exif_data:
        metadata = {TAGS.get(tag): value for tag, value in exif_data.items()}
        gps_info = get_gps_info(exif_data)
        return metadata, gps_info
    return {}, None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=['photo', 'document'])
async def handle_docs_photo(message: types.Message):
    if await anti_spam(message):
        return

    file_info = await bot.get_file(message.document.file_id if message.document else message.photo[-1].file_id)
    file_path = file_info.file_path
    file = await bot.download_file(file_path)

    try:
        metadata, gps_info = extract_metadata(file)
        if metadata:
            formatted_metadata = format_metadata(metadata, gps_info)
            await message.reply(formatted_metadata, parse_mode=types.ParseMode.HTML)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å GPS
            if gps_info:
                lat = convert_to_degrees(gps_info['GPSLatitude'])
                lon = convert_to_degrees(gps_info['GPSLongitude'])
                await bot.send_location(chat_id=message.chat.id, latitude=lat, longitude=lon)
        else:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
