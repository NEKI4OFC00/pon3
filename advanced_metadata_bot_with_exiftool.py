
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
import exiftool
import time

API_TOKEN = '7964169165:AAEKm-k603knI-iHrVso6ITXR094Nx8YJC0'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

user_requests = {}

# –ê–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async def anti_spam(message: types.Message):
    user_id = message.from_user.id
    current_time = time.time()

    if user_id in user_requests:
        request_times = user_requests[user_id]
        request_times = [req for req in request_times if current_time - req < 2]
        if len(request_times) >= 5:
            await message.answer("–ù–∞—à–∞ –∞–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ‚õîÔ∏è\nP.S. –í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ‚åõÔ∏è")
            await asyncio.sleep(20)  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 20 —Å–µ–∫—É–Ω–¥
            return True
        else:
            user_requests[user_id].append(current_time)
    else:
        user_requests[user_id] = [current_time]

    return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if await anti_spam(message):
        return

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∫–ª—é—á–∞—è EXIFüì∏.\n\n–°–æ–∑–¥–∞—Ç–µ–ª—åüëë: @OS7NT")

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
def format_metadata(metadata):
    formatted_metadata = "<b>üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:</b>\n\n"
    for tag, value in metadata.items():
        formatted_metadata += f"<b>{tag}:</b> {value}\n"
    
    return formatted_metadata

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ExifTool
def extract_metadata(file):
    with exiftool.ExifTool() as et:
        metadata = et.get_metadata(file)
    return metadata

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=['photo', 'document'])
async def handle_docs_photo(message: types.Message):
    if await anti_spam(message):
        return

    file_info = await bot.get_file(message.document.file_id if message.document else message.photo[-1].file_id)
    file_path = file_info.file_path
    file = await bot.download_file(file_path)

    try:
        metadata = extract_metadata(file.name)
        if metadata:
            formatted_metadata = format_metadata(metadata)
            await message.reply(formatted_metadata, parse_mode=types.ParseMode.HTML)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ GPS –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            if 'Composite:GPSLatitude' in metadata and 'Composite:GPSLongitude' in metadata:
                lat = metadata['Composite:GPSLatitude']
                lon = metadata['Composite:GPSLongitude']
                await bot.send_location(chat_id=message.chat.id, latitude=lat, longitude=lon)
        else:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
